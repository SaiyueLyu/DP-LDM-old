model:
  base_learning_rate: 1.0e-6   # set to target_lr by starting main.py with '--scale_lr False'
  target: ldm.models.diffusion.ddpm.LatentDiffusion
  params:
    # load pretrained LDM
    ckpt_path: '<path to your pretrained svhn dm ckpt>'
#    ignore_keys: ['cond_stage_model'] # comment out for conditional case

    # DDPM beta schedule params (linear interpolation)
    linear_start: 0.0015
    linear_end: 0.0155
    timesteps: 1000

    num_timesteps_cond: 1

    # The key of the input to the stage in the batch object (e.g. batch["image"])
    first_stage_key: "image"
    cond_stage_key: "class_label"

    # The size of the latent space representation of the image
    image_size: 4
    channels: 3

    # Training options
    cond_stage_trainable:  True
    loss_type: l2

    conditioning_key: "crossattn"
    train_condition_only: True
    attention_flag: 'spatial'

    # Logging options
    log_every_t: 200
#    use_ema: false
    monitor: 'val/loss_simple_ema'

    # Differential privacy options (also requires trainer.max_steps to be set)
    dp_config:
      enabled: True
      epsilon: 10
      delta: 1.0e-5
      max_grad_norm: 0.1
      poisson_sampling: True


    scheduler_config: # 10000 warmup steps
      target: ldm.lr_scheduler.LambdaLinearScheduler
      params:
        warm_up_steps: [10000]
        cycle_lengths: [10000000000000]
        f_start: [1.e-6]
        f_max: [1.]
        f_min: [ 1.]

    unet_config:
      target: ldm.modules.diffusionmodules.openaimodel.UNetModel
      params:
        image_size: 4
        in_channels: 3
        out_channels: 3
        model_channels: 64
        attention_resolutions: [ 1,2 ]
        num_res_blocks: 1
        channel_mult: [ 1,2 ]
        num_heads: 4
        use_scale_shift_norm: True
        resblock_updown: True
        use_spatial_transformer: True
        transformer_depth: 1
        context_dim: 2

    first_stage_config:
      target: ldm.models.autoencoder.AutoencoderKL
      params:
        embed_dim: 3
        monitor: "val/rec_loss"
#        ckpt_path: ""
        ddconfig:
          double_z: True
          z_channels: 3
          resolution: 32
          in_channels: 3
          out_ch: 3
          ch: 128
          ch_mult: [1,2,3,5]
          num_res_blocks: 2
          attn_resolutions: [32,16,8 ]
          dropout: 0.0
        lossconfig:
          target: torch.nn.Identity

    cond_stage_config:
      target: ldm.modules.encoders.modules.ClassEmbedder
      params:
        n_classes: 10
        embed_dim: 2
        key: class_label

data:
  target: main.DataModuleFromConfig
  params:
    batch_size: 256
    num_workers: 5
    wrap: False
    train:
      target: ldm.data.mnist.MNISTTrain
      params:
        size: 32 
    validation:
      target: ldm.data.mnist.MNISTVal
      params:
        size: 32 

lightning:
  callbacks:
    image_logger:
      target: main.ImageLogger
      params:
        batch_frequency: 10000
        max_images: 8
        increase_log_steps: False


  trainer:
    benchmark: True
    max_epochs: 80 # need to specify for dp settings
    accelerator: gpu  # need to be gpu instead of ddp for dp settings

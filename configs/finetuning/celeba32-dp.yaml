model:
  base_learning_rate: 1.0e-06
  target: ldm.models.diffusion.ddpm.LatentDiffusion
  params:
    # Load LDM model pretrained on ImageNet
    ckpt_path: "models/ldm/imagenet32/model.ckpt"
    ignore_keys: ['cond_stage_model']

    # DDPM beta schedule parameters (linear interpolation)
    linear_start: 0.0015
    linear_end: 0.0195
    timesteps: 1000
    num_timesteps_cond: 1

    # The key of the input to the stage in the batch object (e.g. batch["image"])
    first_stage_key: image

    # The size of the latent space representation of the image
    image_size: 16
    channels: 3

    # Training options
    cond_stage_trainable: False
    concat_mode: False
    scale_by_std: True
    train_attention_only: True
    attention_flag: 'self'

    # Logging options
    monitor: val/loss_simple_ema
    log_every_t: 200

    # Differential privacy options (also requires trainer.max_epochs to be set)
    dp_config:
      enabled: True
      epsilon: 1
      delta: 1.0e-6
      max_grad_norm: 0.04
      poisson_sampling: True

    # UNet config copied from pretrained LDM model
    unet_config:
      target: ldm.modules.diffusionmodules.openaimodel.UNetModel
      params:
        image_size: 16
        in_channels: 3
        out_channels: 3
        model_channels: 192
        attention_resolutions: [4, 2, 1]
        num_res_blocks: 2
        channel_mult: [1, 2, 4]
        num_head_channels: 32
        use_scale_shift_norm: true
        resblock_updown: true

    # Autoencoder config copied from pretrained first-stage model
    first_stage_config:
      target: ldm.models.autoencoder.AutoencoderKL
      params:
        monitor: val/rec_loss
        ckpt_path: models/first_stage_models/imagenet32-16x16x3/model.ckpt
        embed_dim: 3
        lossconfig:
          target: ldm.modules.losses.LPIPSWithDiscriminator
          params:
            disc_start: 50001
            kl_weight: 1.0e-06
            disc_weight: 0.5
        ddconfig:
          double_z: true
          z_channels: 3
          resolution: 32
          in_channels: 3
          out_ch: 3
          ch: 128
          ch_mult: [1, 2]
          num_res_blocks: 2
          attn_resolutions: [16, 8]
          dropout: 0.0

    # Specify unconditional model
    cond_stage_config: __is_unconditional__


data:
  target: main.DataModuleFromConfig
  params:
    batch_size: 150
    num_workers: 4
    wrap: false
    train:
      target: ldm.data.celeba.CelebATrain
      params:
        config:
          size: 32
    validation:
      target: ldm.data.celeba.CelebAValidation
      params:
        config:
          size: 32


lightning:
  callbacks:
    image_logger:
      target: main.ImageLogger
      params:
        batch_frequency: 500
        max_images: 8
        increase_log_steps: False
  trainer:
    benchmark: True
    max_epochs: 50
